/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.daw.films.dao;

import com.daw.films.model.Pelicula;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.naming.Context;
import javax.naming.InitialContext;
import javax.naming.NamingException;
import javax.sql.DataSource;

public class PeliculaDAOJDBC implements PeliculaDAO {

    private static final String dbTable = "peliculas";
    private static final String[] autoField = {"id"}; //Autogenerated field for new records
    private static final String connPoolName = "java:comp/env/jdbc/peliculas";  //Tomcat
    //private static String connPoolName="jdbc/gestClub";               //Glassfish
    private static final String SQL_BUSCAID = "SELECT * FROM Peliculas where id=?";
    private static final String SQL_BUSCATODOS = "SELECT * FROM PELICULAS";
    private static final String SQL_BUSCATITULO = "SELECT * FROM PELICULAS WHERE TITULO = ?";
    private static final String SQL_CREA = "INSERT INTO Peliculas (titulo,sinopsis,imagen) VALUES (?,?,'defecto.jpg')";
    private static final String SQL_ACTUALIZA = "UPDATE Peliculas set TITULO=?, SINOPSIS=?, IMAGEN='origen.jpg' WHERE id=?";
    private static final String SQL_BORRA = "DELETE FROM Peliculas WHERE id=?";

    private DataSource ds = null;

    public PeliculaDAOJDBC() {
        if (ds == null) {
            try {
                Context context = new InitialContext();
                ds = (DataSource) context.lookup(connPoolName);
            } catch (NamingException ex) {
                Logger.getLogger(PeliculaDAOJDBC.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
            }
        }
    }

    /**
     * Recupera una pelicula del registro actual del RS (MAPPING)
     */
    private static Pelicula peliculaMapper(ResultSet rs) throws SQLException {
        Pelicula p;
        p = new Pelicula(rs.getInt("id"),
                rs.getString("TITULO"),
                rs.getString("SINOPSIS"),
                rs.getString("IMAGEN")
        );
        return p;
    }

    @Override
    public Pelicula buscaId(Integer id) {
        Pelicula p = null;
        try (Connection conn = ds.getConnection();
                PreparedStatement stmn = conn.prepareStatement(SQL_BUSCAID)) {
            stmn.setInt(1, id);
            try (ResultSet rs = stmn.executeQuery()) {
                rs.next();
                p = peliculaMapper(rs);
            }
        } catch (SQLException ex) {
            Logger.getLogger(PeliculaDAOJDBC.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
        }
        return p;
    }

    @Override
    public List<Pelicula> buscaTodos() {
        List<Pelicula> l = new ArrayList<>();
        try (Connection conn = ds.getConnection();
                Statement stmn = conn.createStatement();
                ResultSet rs = stmn.executeQuery(SQL_BUSCATODOS);) {
            while (rs.next()) {
                l.add(peliculaMapper(rs));
            }
        } catch (Exception ex) {
            Logger.getLogger(PeliculaDAOJDBC.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
        }
        return l;
    }

    @Override
    public Pelicula buscaTitulo(String title) {
        Pelicula p = null;
        try (Connection conn = ds.getConnection();
                PreparedStatement stmn = conn.prepareStatement(SQL_BUSCAID)) {
            stmn.setString(1, title);
            try (ResultSet rs = stmn.executeQuery()) {
                rs.next();
                p = peliculaMapper(rs);
            }
        } catch (SQLException ex) {
            Logger.getLogger(PeliculaDAOJDBC.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
        }
        return p;
    }

    @Override
    public boolean crea(Pelicula p) {
        boolean result = false;
        try (Connection conn = ds.getConnection();
                PreparedStatement stmn = conn.prepareStatement(SQL_CREA, autoField);) {
            stmn.setString(1, p.getTitulo());
            stmn.setString(2, p.getSinopsis());
            //stmn.setString(3, p.getImagen());
            stmn.executeUpdate();
            try (ResultSet rs = stmn.getGeneratedKeys()) {
                //Get autogenerated field value
                if (rs != null && rs.next()) {
                    int nuevoId = rs.getInt(1); //RS has only one field with key value
                    p.setId(nuevoId);
                }
            } catch (Exception ex) {
                Logger.getLogger(PeliculaDAOJDBC.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
            }
        } catch (Exception ex) {
            Logger.getLogger(PeliculaDAOJDBC.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
        }
        return result;
    }

    @Override
    public boolean guarda(Pelicula p) {
        boolean result = false;
        try (Connection conn = ds.getConnection();
                PreparedStatement stmn = conn.prepareStatement(SQL_ACTUALIZA, autoField);) {
            stmn.setString(1, p.getTitulo());
            stmn.setString(2, p.getSinopsis());
            //stmn.setString(3, p.getImagen());
            stmn.setInt(3, p.getId());
            result = (stmn.executeUpdate() == 1);
        } catch (Exception ex) {
            Logger.getLogger(PeliculaDAOJDBC.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
        }
        return result;
    }

    @Override
    public boolean borra(Integer id) {
        boolean result = false;
        try (Connection conn = ds.getConnection();
                PreparedStatement stmn = conn.prepareStatement(SQL_BORRA);) {
            stmn.setInt(1, id);
            result = (stmn.executeUpdate() == 1);
        } catch (Exception ex) {
            Logger.getLogger(PeliculaDAOJDBC.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
        }
        return result;
    }
}
